# You can have multiple PHP servers setup behind this proxy
upstream phpfpm {
	server 127.0.0.1:9000;
}

# Multiple memcached servers, first one back wins!
upstream memcached {
	server 127.0.0.1:11211;
}

# Wordpress site server
upstream wordpressfcgi {
	server 127.0.0.1:8800;
}

proxy_cache_path /tmp/nginx levels=1:2 keys_zone=USERINFO:8m max_size=1m inactive=4h;

# # Proxy cache log
log_format proxy_log '$upstream_cache_status [$time_local] '
					'"$request" $status $body_bytes_sent '
					'$upstream_response_time $msec'
					'"$http_referer" "$http_user_agent"';

# error_page is inherited from the parent level if not defined in child level
# This allows the error page to be redefined multiple times
recursive_error_pages on;

# Who is processing this request?
#add_header X-Backend-Server $hostname;

server {
	listen 80;
	server_name ~^www\.(?<domain>.+)$;
	return 301 $scheme://$domain/$request_uri;
}

server {
	
	listen 80;
	# default_server;
	#listen 443 default_server ssl;
	#listen [::]:80 default_server ipv6only=on;
	#listen [::]:8080 default_server ipv6only=on;
	#listen [::]:443 default_server ssl ipv6only=on;
	
	server_name example.com *.example.com;
	root /var/www/example.com/public;

	# Do NOT add index.php
	index index.html;

	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;
	
	# If you have haproxy, varnish, or just more nginx boxes in front of this
	# box you can import the real client ip by passing a header to this box
	#set_real_ip_from 192.168.16.27; #Put the Ip of your varnish/haproxy here
	#real_ip_header X-Client; #Put the Header that your varnish/haproxy set

	# If you needed to proxy JS requests or something
	# http://example.com/userinformation?id=1008517
	# location /userinformation {

	# 	access_log /var/log/nginx/proxy-access.log proxy_log;

	# 	proxy_pass http://192.168.0.0/path/to/script.php;
	# 	proxy_read_timeout 40s;

	# 	proxy_cache USERINFO;
	# 	proxy_cache_valid 200 302 1d;
	# 	proxy_cache_valid 404 1m;

	# 	proxy_cache_key $server_name$request_uri$is_args$args;

	# 	proxy_ignore_headers Cache-Control;
	# 	proxy_ignore_headers Set-Cookie;

	# 	proxy_set_header X-Real-IP $remote_addr;
	# 	add_header X-Cache-Status $upstream_cache_status;
	# }

	# Old site was in /blog, we need to redirect to new site
	# location ^~ /blog {
	#  	rewrite ^/blog/(.+?)$ /$1 redirect;
	# }

	# We don't want to bother memcached or PHP with missing static assets.
	# So as long as this isn't a PHP file, we can skip the rest of the config.
	# Cache all assets for at least 1 day
	location ~ "\.(?!php)[a-z]{2,5}$" {
		add_header x-just-static "true";
		try_files $uri $uri/ =404;
		access_log off;
	 	expires 1d;
	}

	# Redirect robots.txt requests to dynamic robots.txt.php file
	rewrite ^/robots\.txt$ /robots.txt.php last;

	## Forward all this information for PHP when we proxy_pass
	proxy_set_header Host $host;
	proxy_set_header X-Real-IP $remote_addr;
	#proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

	# ".php" or "/foo/bar" are probably PHP pages
	location / {
		
		# Default type is plain text, need to make it html so that any cache hits by nginx are served as html
		default_type text/html;

		set $can_cache 1;

		# Bypass memcached for POST requests
		if ( $request_method = "POST" ) {
			set $can_cache 0;
		}

		# avoid cache serve of wp-admin-like pages, starting with "wp-"
		if ( $uri ~ "/wp-" ) {
			set $can_cache 0;
		}

		# avoid cache serve of any URL with query strings																		
		if ( $args ) {
			set $can_cache 0;
		}
		
		# If logged in, don't cache.
		if ($http_cookie ~* "comment_author_|wordpressuser_|wp-postpass_|wordpress_logged_in_" ) {
			set $can_cache 0;
		}

  		# Tell memcached when to try another server
		#memcached_next_upstream not_found invalid_response error timeout;

		# Pull from memcached pool if possible
		if ( $can_cache = 1 ) {

			# Set the default memcached key using the host + full request uri (including querystring)
			set $memcached_key data-$scheme://$host$request_uri;

			# These headers are not needed
			#add_header X-MemKey $memcached_key;
			#add_header X-Requestkey $request_uri;
			add_header X-Cache "memcached";
			
			# Pass the request to memcached
			memcached_pass memcached;

			# Pass any misses or fails to wordpress
			error_page 404 502 504 = @fallback;
		}

		if ( $can_cache = 0 ) {
			# Pass any misses to wordpress
			proxy_pass http://wordpressfcgi;
		}

	}

	# Define fallback location for memcache misses
	location @fallback {
		proxy_pass http://wordpressfcgi;
	}
}

server {
	listen 8800;

	server_name example.com;

	root /var/www/example.com/public;
	
	# Now that we are done with memcached, we need this!
	index index.html index.php;

	access_log /var/log/nginx/wp-access.log;
	error_log /var/log/nginx/wp-error.log;

	# This is supposed to be a private server on :8880.
	# Force requests through the public :80 server block above!
	allow 127.0.0.1;
    deny all;

	# Check if files/directory exist, if not rewrite to index.php
	location / {

		# System Maintenance (Service Unavailable)
		# if (-f $document_root/system_maintenance.html ) {
		# 	error_page 503 = /system_maintenance.html;
		# 	return 503;
		# }

		try_files $uri $uri/ @rewritetophp;
	}

	location @rewritetophp {
		rewrite ^ /index.php last;
	}

	# Pass PHP scripts to php-fastcgi listening on port 9000
	location ~* \.php$ {

		# Zero-day exploit defense.
		# http://forum.nginx.org/read.php?2,88845,page=3
		# Won't work properly (404 error) if the file is not stored on 
		# this server,	which is entirely possible with php-fpm/php-fcgi.
		# Comment the 'try_files' line out if you set up php-fpm/php-fcgi
		# on another machine.
		# We need to add "try_files $uri =404;" to make sure that "/uploads/virusimage.jpg/hello.php"
		# never executes the hidden php code inside virusimage.jpg because it can't find hello.php!
		# The exploit also can be stopped by adding "cgi.fix_pathinfo = 0" in your php.ini file. 
		try_files $uri =404;

		include fastcgi_params;

		proxy_http_version	1.1;
		proxy_buffering		off;
		proxy_redirect		off;

		# Since we are behind a proxy (see top server block) we need to 
		# Tell PHP the real remote_addr, not the IP of the proxy server.
		# We can do this because we trust the proxy (because we run it).
		fastcgi_param		REMOTE_ADDR $http_x_real_ip;
		# Also, there is no danger of a user faking this header since
		# they can't access this server directly (see allow/deny).

		# Oh, and let PHP know what the original Host header was
		#proxy_set_header	Host $host;
		#proxy_set_header	X-Real-IP $remote_addr;
		#proxy_set_header	X-Forwarded-For $proxy_add_x_forwarded_for;

		# If this is a single machine use the (php5-fpm default) unix socket
		#fastcgi_pass unix:/var/run/php5-fpm.sock;

		# If you have multiple PHP servers setup behind this proxy
		# or you have PHP-FPM listening on TCP
		fastcgi_pass phpfpm;
	}

}
